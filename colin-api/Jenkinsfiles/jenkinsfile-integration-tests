#!/usr/bin/env groovy
//
// Copyright Â© 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
node {
    stage('deploy fresh oracle') {
        script {
            openshift.withCluster() {
                openshift.withProject("gl2uos-tools") {
                  def deploy = openshift.selector("dc", "oradb1")
                  def podSelector = openshift.selector('pod', [ app:'oradb1' ])
                  def oldPod = podSelector.name()
                  deploy.rollout().latest()

                  podSelector.untilEach {
                    echo "pod: ${it.name()}"
                    echo "${it}"
                    if (it.name() != oldPod && it.object().status.containerStatuses[0].ready) {
                        sleep 80
                        // todo: make this check if database is up (currently passes no matter what)
                        try {
                            echo "${it.name()}"
                            def pod = it.name().substring(4)
                            echo "${pod}"
                            sh """
                                oc rsh ${pod}
                                /u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus c##ctst/tiger

                            """
                            return true
                        } catch (Exception e) {
                            echo "${e}"
                            //return false
                            return true
                        }
                    } else {
                        return false;
                    }
                  }

                  // wait until db is most likely populated
                  sleep 180 // wait 3 minutes

                }
            }
        }

    } // end stage
}
*/

    // 3. run pytests

    //node/pod needs environment setup for testing
    def py3njs_label = "jenkins-py3nodejs-${UUID.randomUUID().toString()}"
    podTemplate(label: py3njs_label, name: py3njs_label, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-py3nodejs',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            workingDir: '/tmp',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}',
            envVars: [
                envVar(key:'TEST_ORACLE_DB_NAME', value: "ORCLCDB.localdomain"),
                envVar(key:'TEST_ORACLE_HOST', value: "oradb1"),
                envVar(key:'TEST_ORACLE_PORT', value: "1521"),
                secretEnvVar(key: 'TEST_ORACLE_USER', secretName: 'oracle-integration-test', secretKey: 'test-database-user'),
                secretEnvVar(key: 'TEST_ORACLE_PASSWORD', secretName: 'oracle-integration-test', secretKey: 'test-database-password'),
                //secretEnvVar(key: 'JWT_OIDC_WELL_KNOWN_CONFIG', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_WELL_KNOWN_CONFIG'),
                //secretEnvVar(key: 'JWT_OIDC_ALGORITHMS', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_ALGORITHMS'),
                //secretEnvVar(key: 'JWT_OIDC_AUDIENCE', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_AUDIENCE'),
                //secretEnvVar(key: 'JWT_OIDC_CLIENT_SECRET', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_CLIENT_SECRET')
           ]
        )
    ])
    {
        node (py3njs_label){
            stage('Checkout') {
                try {
                    echo "checking out source"
                    echo "Build: ${BUILD_ID}"
                    checkout scm
                    GIT_COMMIT_SHORT_HASH = sh (
                            script: """git describe --always""", returnStdout: true
                        ).trim()
                    GIT_COMMIT_AUTHOR = sh (
                            script: """git show -s --pretty=%an""", returnStdout: true
                        ).trim()

                } catch (Exception e) {
                    echo "error during checkout: ${e}"
                    error('Aborted')
                }
                stage ('local pytest') {
                    echo "Testing build: ${BUILD_ID}"
                    echo "Running tests "
                    try {
                        sh '''
                             cd colin-api
                             python --version
                             pip install pip --upgrade
                             pip install -r requirements/testing.txt
                             pytest --junitxml=pytest_report.xml
                        '''
                        junit 'colin-api/pytest_report.xml'
                        stash includes: 'colin-api/pytest_report.xml', name: 'colin-api-pytests'

                    } catch (Exception e) {
                        echo "EXCEPTION: ${e}"

                    }


                } // end stage - local pytest

            }//end stage
        }
    }

    // 4. spin down oracle pod

/*

    // create NodeJS pod to run verification steps
    def node_label = "node-${UUID.randomUUID().toString()}"
    podTemplate(label: node_label, name: node_label, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/python:3.6',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            workingDir: '/tmp',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node (node_label) {
            checkout scm
            dir('colin-api') {
                try {
                    sh '''
                        python config.py
                    '''
                    stage("Run pytests") {
                        def testResults = sh(script: "py.test", returnStatus: true)

                        echo "Unit tests ran, returned ${testResults}"
                        if (testResults > 0) {
                            try {
                                timeout(time: 1, unit: 'DAYS') {
                                    input message: "tests failed. Continue?", id: "1"
                                }
                            } catch (Exception e) {
                                error('Abort')
                            }
                        }
                    }
                    stage("Check code quality (lint)") {
                        def lintResults = sh(script: "npm run lint:nofix", returnStatus: true)

                        echo "Linter ran, returned ${lintResults}"
                        if (lintResults > 0) {
                            try {
                                timeout(time: 1, unit: 'DAYS') {
                                    input message: "Linter failed. Continue?", id: "2"
                                }
                            } catch (Exception e) {
                                error('Abort')
                            }
                        }
                    }

                } catch (Exception e) {
                    error('Failure')
                }

            }
        }
    }
*/
