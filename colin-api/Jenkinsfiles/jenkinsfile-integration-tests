#!/usr/bin/env groovy
//
// Copyright Â© 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

def COMPONENT_NAME = 'colin-api-integration-testing'

// 1. Deploy fresh oracle pod

/*
node {
    stage('deploy fresh oracle') {
        script {
            openshift.withCluster() {
                openshift.withProject("gl2uos-tools") {
                  def deploy = openshift.selector("dc", "oradb1")
                  def podSelector = openshift.selector('pod', [ app:'oradb1' ])
                  def oldPod = podSelector.name()
                  deploy.rollout().latest()

                  podSelector.untilEach {
                    echo "pod: ${it.name()}"
                    echo "${it}"
                    if (it.name() != oldPod && it.object().status.containerStatuses[0].ready) {
                        sleep 80
                        // todo: make this check if database is up (currently passes no matter what)
                        try {
                            echo "${it.name()}"
                            def pod = it.name().substring(4)
                            echo "${pod}"
                            sh """
                                oc rsh ${pod}
                                /u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus c##ctst/tiger

                            """
                            return true
                        } catch (Exception e) {
                            echo "${e}"
                            //return false
                            return true
                        }
                    } else {
                        return false;
                    }
                  }

                  // wait until db is most likely populated
                  sleep 180 // wait 3 minutes

                }
            }
        }

    } // end stage
}
*/

// 2. Build and deploy testing pod
    stage("Build ${COMPONENT_NAME}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Building ${COMPONENT_NAME} ..."
            def build = openshift.selector("bc", "${COMPONENT_NAME}")
            build.startBuild("--wait=true").logs("-f")
          }
        }
      }
    }

    stage("Deploy ${COMPONENT_NAME}:${TAG_NAME}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Tagging ${COMPONENT_NAME} for deployment to ${TAG_NAME} ..."

            // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
            // Tag the images for deployment based on the image's hash
            def IMAGE_HASH = getImageTagHash("${COMPONENT_NAME}")
            echo "IMAGE_HASH: ${IMAGE_HASH}"
            openshift.tag("${COMPONENT_NAME}@${IMAGE_HASH}", "${COMPONENT_NAME}:${TAG_NAME}")
          }
        }
      }
    }


// 3. run pytests

// 4. spin down oracle pod
